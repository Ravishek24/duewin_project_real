==================================================
SPRIBE GAMES INTEGRATION API (1.9.0)
==================================================

GAME LAUNCH PROCESS
--------------------------------------------------
To launch a game, the online casino should generate a launch link with the appropriate parameters and open it in a browser.

--- PRODUCTION LAUNCH ---

Parameters:
Parameter               Type                    Description
----------------------- ----------------------- ---------------------------------------------------------------------------------
game                    string [game enum]      Identifies the specific game (Game Identificator).
user                    string                  ID of the player on the operator's side.
token                   string                  A unique one-time token generated by the operator for launch and authentication.
currency                string [currency enum]  Game currency (currency code).
operator                string                  Operator key name.
lang (optional)         string [lang enum]      Game interface language.
return_url (optional)   string [pattern url]    URL to return to from the game.
account_history_url (optional) string [pattern url] URL for the player's bet history in the game menu.
irc_duration (optional) integer [seconds]       Period to stop the game and show the reality check window.
irc_elapsed (optional)  integer [seconds]       The elapsed time from the first period of the reality check.

URL Structure:
https://{launch-url}/{game}?user={user}&token={token}&lang={lang}&currency={currency}&operator={operator}&return_url={return_url}


--- DEMO LAUNCH ---

Parameters:
Parameter             Type                    Description
--------------------- ----------------------- ------------------------------------
game                  string [game enum]      Identifies the specific game.
currency (optional)   string [currency enum]  Game currency (currency code).
lang (optional)       string [lang enum]      Game interface language.
return_url (optional) string [pattern url]    URL to return to from the game.

Real Demo Launch URL Structure:
https://demo.spribe.io/launch/{game}?currency={currency}&lang={lang}&return_url={return_url}

Real Demo URL Example:
https://demo.spribe.io/launch/aviator?currency=USD&lang=EN&return_url=https://demo.spribe.io/game-browser/


SPECIFICATIONS
--------------------------------------------------

Games:
Name                  Provider key          Game identificator
--------------------- --------------------- --------------------
Aviator               spribe_aviator        aviator
Dice                  spribe_crypto         dice
Goal                  spribe_crypto         goal
Plinko                spribe_crypto         plinko
Mines                 spribe_crypto         mines
Hi Lo                 spribe_crypto         hi-lo
Keno                  spribe_crypto         keno
Mini Roulette         spribe_crypto         mini-roulette
Hotline               spribe_crypto         hotline
Balloon               spribe_crypto         balloon
Keno 80               spribe_keno           multikeno
Trader                spribe_trader         trader
Crystal Fall          spribe_slots          crystal-fall
Neo Vegas             spribe_slots          neo-vegas
Gates of Egypt        spribe_slots          gates-of-egypt

Available Currencies (Fiat & Crypto):
Code | Name                                Code | Name
-----|-------------------------------------|----|-----------------------------------
AED  | United Arab Emirates Dirham         | LAK| Lao Kip
AFN  | Afghanistan Afghani                 | LBP| Lebanese Pound
ALL  | Albanian Lek                        | LEK| Albanian lek
AMD  | Armenian Dram                       | LKR| Sri Lankan Rupee
ANG  | Netherlands Antillean Guilder       | LRD| Liberian Dollar
AOA  | Angolan Kwanza                      | LSL| Lesotho Loti
ARS  | Argentine Peso                      | LYD| Libyan Dinar
AUD  | Australian Dollar                   | MAD| Moroccan Dirham
AWG  | Aruban Florin                       | MDL| Moldovan Leu
AZN  | Azerbaijan Manat                    | MGA| Malagasy Ariary
BAM  | Bosnian Convertible Mark            | MKD| Macedonian Denar
BBD  | Barbados Dollar                     | MMK| Burmese Kyats
BDT  | Bangladeshi Taka                    | MNT| Mongolian Tögrög
BGN  | Bulgarian Lev                       | MOP| Macanese Pataca
BHD  | Bahraini Dinar                      | MRU| Mauritanian Ouguiya
BIF  | Burundian Franc                     | MUR| Mauritian Rupee
BMD  | Bermudian Dollar                    | MVR| Maldivian Rufiyaa
BND  | Brunei Dollar                       | MWK| Malawian Kwacha
BOB  | Bolivian Bolivianos                 | MXN| Mexican Peso
BRL  | Brazilian Real                      | MYR| Malaysian Ringgit
BSD  | Bahamian Dollar                     | MZN| Mozambican Metical
BTN  | Bhutanese Ngultrum                  | NAD| Namibian Dollar
BWP  | Botswana Pula                       | NGN| Nigerian Naira
BYN  | Belarusian Ruble                    | NIO| Nicaraguan Cordoba
BYR  | Belarusian Ruble                    | NOK| Norwegian Krone
BZD  | Belize Dollar                       | NPR| Nepalese Rupee
CAD  | Canadian Dollar                     | NZD| New Zealand Dollar
CDF  | Congolese Franc                     | OMR| Omani Rial
CHF  | Swiss Frank                         | PAB| Panamanian Balboa
CLP  | Chilean Peso                        | PEN| Peruvian Sol
CNY  | Chinese Yuan Renminbi               | PGK| Papua New Guinean Kina
COP  | Colombian Peso                      | PHP| Philippine Peso
CRC  | Costa Rican Colon                   | PKR| Pakistani Rupee
CUC  | Cuban Convertible Peso              | PLN| Polish Złoty
CUP  | Cuban Peso                          | PYG| Paraguayan Guaraní
CVE  | Cape Verdean Escudo                 | QAR| Qatari Riyal
CZK  | Czech Koruna                        | RON| Romanian Leu
DJF  | Djiboutian Franc                    | RSD| Serbian Dinar
DKK  | Danish Krone                        | RWF| Rwandan Franc
DOP  | Dominican Peso                      | SAR| Saudi Riyal
DZD  | Algerian Dinar                      | SBD| Solomon Islands Dollar
EGP  | Egyptian Pound                      | SCR| Seychellois Rupee
ERN  | Eritrean Nakfa                      | SDG| Sudanese Pound
ETB  | Ethiopian Birr                      | SEK| Swedish Krona
EUR  | European Euro                       | SGD| Singapore Dollar
FJD  | Fijian Dollar                       | SLE| Sierra Leonean Leone
FKP  | Falkland Islands Pound              | SOS| Somali Shilling
GBP  | British Pound                       | SRD| Suriname Dollar
GEL  | Georgian Lari                       | SYP| Syrian Pound
GHS  | Ghanaian Cedi                       | SZL| Swazi Lilangeni
GIP  | Gibraltar Pound                     | THB| Thai Baht
GMD  | Gambian Dalasi                      | TJS| Tajikistani Somoni
GNF  | Guinean Franc                       | TMT| Turkmenistan Manat
GTQ  | Guatemalan Quetzal                  | TND| Tunisian Dinar
GYD  | Guyanese Dollar                     | TOP| Tonga Paanga
HKD  | Hong Kong Dollar                    | TRY| Turkish Lira
HNL  | Honduran Lempira                    | TTD| Trinidad and Tobago Dollar
HRK  | Croatian Kuna                       | TWD| New Taiwan Dollar
HTG  | Haitian Gourde                      | TZS| Tanzanian Shilling
HUF  | Hungarian Forint                    | UAH| Ukrainian Hryvnia
IDR  | Indonesian Rupiah                   | UGX| Ugandan Shilling
ILS  | Israeli New Shekel                  | USD| United States Dollar
INR  | Indian Rupee                        | UYU| Uruguayan Peso
IQD  | Iraqi Dinar                         | UZS| Uzbekistani Som
ISK  | Icelandic Krona                     | VEF| Venezuelan Bolívar
JMD  | Jamaican Dollar                     | VES| Venezuelan Bolivar
JOD  | Jordanian Dinar                     | VND| Vietnamese Dong
JPY  | Japanese Yen                        | VUV| Vanuatu Vatu
KES  | Kenyan Shilling                     | WST| Samoan Tālā
KGS  | Kyrgyzstani Som                     | XAF| Central African CFA Franc
KHR  | Cambodian Riel                      | XCD| Eastern Caribbean Dollar
KMF  | Comorian Franc                      | XOF| West African CFA Franc
KPW  | North Korean Won                    | XPF| CFP Franc
KRW  | South Korean Won                    | YER| Yemeni Rial
KWD  | The Kuwaiti Dinar                   | ZAR| South African Rand
KYD  | Caymanian Dollar                    | ZMW| Zambian Kwacha
KZT  | Kazakhstani Tenge                   | ZWL| Zimbabwean Dollar

Available Languages:
Lang | Name
-----|--------------------
az   | Azerbaijani
bg   | Bulgarian
bn   | Brunei Darussalam (Bengali)
cs   | Czech
de   | Germany
el   | Greek
en   | English
es   | Spanish
fa   | Farsi/Persian
fi   | Finnish
fr   | French
hi   | Hindi
hr   | Croatian
hu   | Hungarian
hy   | Armenian
id   | Indonesian
it   | Italian
ja   | Japanese
ka   | Georgian
ko   | Korean
lt   | Lithuanian
lv   | Latvian
nl   | Dutch
pl   | Polish
pt   | Portuguese
pt-br| Portuguese (Brazil)
ro   | Romanian
ru   | Russian
sq   | Albanian
sr   | Serbian
sv   | Swedish
sw   | Swahili
th   | Thai
tl   | Tagalog
tr   | Turkish
uk   | Ukrainian
uz   | Uzbek
vi   | Vietnamese
zh   | Chinese Simplified
zh-tw| Chinese Traditional


AUTHENTICATION
--------------------------------------------------
This method requests authentication for a player trying to launch the game.

Path: /auth
Request Method: POST
Content-Type: application/json; charset=utf-8
Headers: X-Spribe-Client-ID, X-Spribe-Client-TS, X-Spribe-Client-Signature

Request Parameters:
Parameter       Type                    Description
--------------- ----------------------- ---------------------------------------------------
user_token      string                  Token generated by operator during game launch.
session_token   string                  Token generated by provider for the current game session.
platform        string [platform enum]  Enum: mobiledesktop
currency        string [currency enum]  Game currency (currency code).

Response Parameters:
Parameter   Type                    Description
----------- ----------------------- --------------------------------------------------
code        integer [enum]          Response code.
message     string                  Response message.
data        object                  Required only when code is 200.
user_id     string                  Player ID on the operator's side.
username    string                  Player's name.
balance     long                    Current balance in the specified currency.
currency    string [currency enum]  Player's currency.

Possible Codes:
200 - Success
401 - User token is invalid
403 - User token is expired
413 - Invalid Client-Signature
500 - Internal error


PLAYER INFORMATION
--------------------------------------------------
This method retrieves player information.

Path: /info
Request Method: POST
Content-Type: application/json; charset=utf-8
Headers: X-Spribe-Client-ID, X-Spribe-Client-TS, X-Spribe-Client-Signature

Request Parameters:
Parameter       Type                    Description
--------------- ----------------------- ---------------------------------------------------
user_id         string                  Player ID on operator's side.
session_token   string                  Token generated by provider for the current game session.
currency        string [currency enum]  Game currency (currency code).

Response Parameters:
Parameter   Type                    Description
----------- ----------------------- --------------------------------------------------
code        integer [enum]          Response code.
message     string                  Response message.
data        object                  Required only when code is 200.
user_id     string                  Player ID on the operator's side.
username    string                  Player's name.
balance     long                    Current balance in the specified currency.
currency    string [currency enum]  Player's currency.

Possible Codes:
200 - Success
401 - User token is invalid
403 - User token is expired
413 - Invalid Client-Signature
500 - Internal error


WITHDRAW
--------------------------------------------------
This method withdraws money from a player's balance.

Path: /withdraw
Request Method: POST
Content-Type: application/json; charset=utf-8
Headers: X-Spribe-Client-ID, X-Spribe-Client-TS, X-Spribe-Client-Signature

Request Parameters:
Parameter       Type                    Description
--------------- ----------------------- ------------------------------------------------------
user_id         string                  Player ID on operator's side.
currency        string [currency enum]  Bet currency (currency code).
amount          long                    Amount to be transferred from the player's balance.
provider        string                  Game provider.
provider_tx_id  string                  Transaction ID assigned by the provider.
game            string [game enum]      Identifies the specific game.
action          string [action enum]    Enum: bet, rain
action_id       string                  ID of the action in the game.
session_token   string                  Game session token.
platform        string [platform enum]  Enum: mobiledesktop

Response Parameters:
Parameter        Type                    Description
---------------- ----------------------- -------------------------------------------
code             integer [enum]          Response code.
message          string                  Response message.
data             object                  Required only when code is 200 or 409.
user_id          string                  Player ID on the operator's side.
operator_tx_id   string                  Unique transaction ID on the operator's side.
provider         string                  Game provider.
provider_tx_id   string                  The transaction ID received by the provider.
old_balance      long                    Balance before the transaction.
new_balance      long                    Balance after the transaction.
currency         string [currency enum]  Transaction currency.

Possible Codes:
200 - Success
401 - User token is invalid
402 - Insufficient fund
403 - User token is expired
405 - Internal error with no retry
409 - Duplicate transaction
412 - Stop game for reality check.
413 - Invalid Client-Signature
500 - Internal error


DEPOSIT
--------------------------------------------------
This method deposits money into a player's account.

Path: /deposit
Request Method: POST
Content-Type: application/json; charset=utf-8
Headers: X-Spribe-Client-ID, X-Spribe-Client-TS, X-Spribe-Client-Signature

Request Parameters:
Parameter               Type                    Description
----------------------- ----------------------- ------------------------------------------------------------------------------------
user_id                 string                  Player ID.
currency                string [currency enum]  Bet currency (currency code).
amount                  long                    Amount to be transferred to the player's balance.
provider                string                  Game provider.
provider_tx_id          string                  Transaction ID assigned by the provider.
game                    string [game enum]      Identifies the specific game.
action                  string                  Type of action (e.g., bet, rain, freebet, promo, challengefreebet).
action_id               string                  ID of the action in the game.
session_token           string                  Game session token.
platform                string [platform enum]  Enum: mobiledesktop
withdraw_provider_tx_id (optional) string       Provider ID of the related withdraw transaction.

Response Parameters:
(Same as Withdraw Response)

Possible Codes:
200 - Success
401 - User token is invalid
403 - User token is expired
409 - Duplicate transaction
413 - Invalid Client-Signature
500 - Internal error


ROLLBACK
--------------------------------------------------
This method rolls back a transaction using the provider's transaction ID.

Path: /rollback
Request Method: POST
Content-Type: application/json; charset=utf-8
Headers: X-Spribe-Client-ID, X-Spribe-Client-TS, X-Spribe-Client-Signature

Request Parameters:
Parameter                 Type                    Description
------------------------- ----------------------- -------------------------------------------------
user_id                   string                  Player ID.
amount                    long                    Amount of money to be rolled back.
provider                  string                  Game provider.
rollback_provider_tx_id   string                  Provider transaction ID to be rolled back.
provider_tx_id            string                  The new transaction ID assigned by the provider for the rollback action.
game                      string [game enum]      Identifies the specific game.
session_token             string                  Game session token.
action                    string [action enum]    Enum: bet, rain
action_id                 string                  ID of the action in the game.

Response Parameters:
(Same as Withdraw Response)

Possible Codes:
200 - Success
401 - User token is invalid
403 - User token is expired
408 - Transaction not found
409 - Duplicate transaction
413 - Invalid Client-Signature
500 - Internal error


API SHARED INFORMATION
--------------------------------------------------

Important Note on Duplication:
If a request times out, the game will send the same transaction with the same `provider_tx_id` again. If the transaction was already processed, the operator must identify the duplication and respond with a duplication error code (409) along with the original transaction's information.

Amount/Balance Formatting:
- FIAT: Represented in units (e.g., 1$ = 1000 units). Example: 5.32 USD becomes 5320.
- CRYPTO: Represented in units (e.g., 1BTC = 100,000,000 units). Example: 0.0532 BTC becomes 5320000.

HTTP Status Code:
If the response `code` is 200, the HTTP status code must also be 200.


SECURING API REQUESTS
--------------------------------------------------
All requests must be secured and validated.

Required Headers:
- X-Spribe-Client-ID: A unique identifier for the operator, provided by Spribe.
- X-Spribe-Client-TS: A timestamp in UTC (seconds since Unix Epoch).
- X-Spribe-Client-Signature: A hashed signature to verify the request integrity.

Generating the X-Spribe-Client-Signature:
1. Concatenate the following values into a single string:
   - Timestamp (from X-Spribe-Client-TS header)
   - Request URI (path with ordered and encoded query parameters, without the domain)
   - Request Body (as a string for POST/PUT requests; omit for GET/DELETE)
2. Hash the concatenated string using the SHA256 HMAC algorithm with the operator's Client Secret as the key.

Validation Process:
1. Retrieve the Client Secret based on the X-Spribe-Client-ID.
2. Repeat the signature creation process on the server side using the received parameters.
3. Compare the generated signature to the received X-Spribe-Client-Signature. A match verifies the request.

Example Implementation (Java):
Below is an example of how to handle secure requests.

@PostMapping(path = "/secure-request")
public ResponseEntity<Void> secureRequest(
    @RequestBody final byte[] body,
    @RequestHeader(name = "X-Spribe-Client-ID") final String clientId,
    @RequestHeader(name = "X-Spribe-Client-TS") final long time,
    @RequestHeader(name = "X-Spribe-Client-Signature") final String signature,
    final HttpServletRequest request
) {
    // Validate headers and timestamp expiration
    final var clientSecret = getClientSecretFromRepository(clientId); // Retrieve Client Secret
    final var queryString = request.getQueryString();
    final var path = request.getRequestURI() + (queryString == null || "".equals(queryString) ? "" : "?" + queryString);
    final var calculatedSignature = createSignature(time, path, body, clientSecret);

    if (!signature.equalsIgnoreCase(calculatedSignature)) {
        throw new SecurityException("Signature mismatch.");
    }
}

public static String createSignature(final long time, final String path, final byte[] body, final String clientSecret) {
    try {
        Mac sha256Hmac = Mac.getInstance("HmacSHA256");
        sha256Hmac.init(new SecretKeySpec(clientSecret.getBytes(StandardCharsets.UTF_8), "HmacSHA256"));
        sha256Hmac.update((time + path).getBytes(StandardCharsets.UTF_8));
        
        byte[] bytes = body == null ? sha256Hmac.doFinal() : sha256Hmac.doFinal(body);
        return HexFormat.of().formatHex(bytes);
    } catch (Exception e) {
        throw new SecurityException("Error creating signature.", e);
    }
}