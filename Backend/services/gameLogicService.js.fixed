// Add this new function to the module
/**
 * Get deterministic color based on number
 * @param {number} number - Number (0-9)
 * @returns {string} - Corresponding color
 */
const getColorForNumber = (number) => {
    const colorMap = {
        0: 'red_violet',
        1: 'green',
        2: 'red',
        3: 'green',
        4: 'red',
        5: 'green_violet',
        6: 'red',
        7: 'green',
        8: 'red',
        9: 'green'
    };
    return colorMap[number];
};

/**
 * Generate all possible results for a game type (UPDATED)
 * @param {string} gameType - Game type
 * @returns {Array} - Array of all possible results
 */
const generateAllPossibleResults = async (gameType) => {
    try {
        logger.info('Generating all possible results', { gameType });

        let results = [];
        switch (gameType.toLowerCase()) {
            case 'wingo':
            case 'trx_wix':
                // Generate combinations with deterministic colors
                for (let number = 0; number <= 9; number++) {
                    const color = getColorForNumber(number); // Use deterministic color
                    for (const size of ['big', 'small']) {
                        results.push({
                            number,
                            size,
                            color
                        });
                    }
                }
                break;

            case 'fived':
            case '5d':
                // Generate all possible combinations of 5 dice (unchanged)
                for (let a = 1; a <= 6; a++) {
                    for (let b = 1; b <= 6; b++) {
                        for (let c = 1; c <= 6; c++) {
                            for (let d = 1; d <= 6; d++) {
                                for (let e = 1; e <= 6; e++) {
                                    results.push({
                                        A: a,
                                        B: b,
                                        C: c,
                                        D: d,
                                        E: e,
                                        sum: a + b + c + d + e
                                    });
                                }
                            }
                        }
                    }
                }
                break;

            case 'k3':
                // Generate all possible combinations of 3 dice (unchanged)
                for (let d1 = 1; d1 <= 6; d1++) {
                    for (let d2 = 1; d2 <= 6; d2++) {
                        for (let d3 = 1; d3 <= 6; d3++) {
                            const sum = d1 + d2 + d3;
                            const counts = [d1, d2, d3].reduce((acc, val) => {
                                acc[val] = (acc[val] || 0) + 1;
                                return acc;
                            }, {});

                            results.push({
                                dice_1: d1,
                                dice_2: d2,
                                dice_3: d3,
                                sum: sum,
                                has_pair: Object.values(counts).includes(2),
                                has_triple: Object.values(counts).includes(3),
                                is_straight: [d1, d2, d3].sort().every((val, idx, arr) =>
                                    idx === 0 || val === arr[idx - 1] + 1
                                ),
                                sum_size: sum > 10 ? 'big' : 'small',
                                sum_parity: sum % 2 === 0 ? 'even' : 'odd'
                            });
                        }
                    }
                }
                break;

            default:
                throw new Error(`Unsupported game type: ${gameType}`);
        }

        logger.info('Generated all possible results', {
            gameType,
            resultCount: results.length
        });

        return results;
    } catch (error) {
        logger.error('Error generating all possible results', {
            error: error.message,
            stack: error.stack,
            gameType
        });
        throw error;
    }
};

/**
 * Generate a random result for a game type (UPDATED)
 * @param {string} gameType - Game type
 * @returns {Object} - Generated random result
 */
const generateRandomResult = async (gameType) => {
    try {
        logger.info('Generating random result', { gameType });

        let result;
        switch (gameType.toLowerCase()) {
            case 'wingo':
            case 'trx_wix':
                const number = Math.floor(Math.random() * 10); // 0-9
                result = {
                    number: number,
                    size: number >= 5 ? 'big' : 'small',
                    color: getColorForNumber(number) // Use deterministic color
                };
                break;

            case 'fived':
            case '5d':
                const dice = Array(5).fill(0).map(() => Math.floor(Math.random() * 6) + 1); // 1-6
                result = {
                    A: dice[0],
                    B: dice[1],
                    C: dice[2],
                    D: dice[3],
                    E: dice[4],
                    sum: dice.reduce((a, b) => a + b, 0)
                };
                break;

            case 'k3':
                const k3Dice = Array(3).fill(0).map(() => Math.floor(Math.random() * 6) + 1); // 1-6
                const sum = k3Dice.reduce((a, b) => a + b, 0);
                const counts = k3Dice.reduce((acc, val) => {
                    acc[val] = (acc[val] || 0) + 1;
                    return acc;
                }, {});

                result = {
                    dice_1: k3Dice[0],
                    dice_2: k3Dice[1],
                    dice_3: k3Dice[2],
                    sum: sum,
                    has_pair: Object.values(counts).includes(2),
                    has_triple: Object.values(counts).includes(3),
                    is_straight: k3Dice.sort().every((val, idx, arr) =>
                        idx === 0 || val === arr[idx - 1] + 1
                    ),
                    sum_size: sum > 10 ? 'big' : 'small',
                    sum_parity: sum % 2 === 0 ? 'even' : 'odd'
                };
                break;

            default:
                throw new Error(`Unsupported game type: ${gameType}`);
        }

        // Validate the generated result
        const validation = await validateFallbackResult(result, gameType);
        if (!validation.isSafe) {
            logger.warn('Generated random result failed validation, regenerating', {
                gameType,
                validation
            });
            return generateRandomResult(gameType); // Recursively try again
        }

        logger.info('Successfully generated random result', {
            gameType,
            result
        });

        return result;
    } catch (error) {
        logger.error('Error generating random result', {
            error: error.message,
            stack: error.stack,
            gameType
        });
        throw error;
    }
};

/**
 * Generate a fallback result for a game type (UPDATED)
 * @param {string} gameType - Game type
 * @returns {Object} - Generated fallback result
 */
const generateFallbackResult = async (gameType) => {
    try {
        switch (gameType.toLowerCase()) {
            case 'wingo':
            case 'trx_wix':
                const number = Math.floor(Math.random() * 10); // 0-9
                return {
                    number: number,
                    size: number >= 5 ? 'big' : 'small',
                    color: getColorForNumber(number) // Use deterministic color
                };

            case 'fived':
            case '5d':
                const dice = Array(5).fill(0).map(() => Math.floor(Math.random() * 6) + 1); // 1-6
                return {
                    A: dice[0],
                    B: dice[1],
                    C: dice[2],
                    D: dice[3],
                    E: dice[4],
                    sum: dice.reduce((a, b) => a + b, 0)
                };

            case 'k3':
                const k3Dice = Array(3).fill(0).map(() => Math.floor(Math.random() * 6) + 1); // 1-6
                const sum = k3Dice.reduce((a, b) => a + b, 0);
                const counts = k3Dice.reduce((acc, val) => {
                    acc[val] = (acc[val] || 0) + 1;
                    return acc;
                }, {});

                return {
                    dice_1: k3Dice[0],
                    dice_2: k3Dice[1],
                    dice_3: k3Dice[2],
                    sum: sum,
                    has_pair: Object.values(counts).includes(2),
                    has_triple: Object.values(counts).includes(3),
                    is_straight: k3Dice.sort().every((val, idx, arr) =>
                        idx === 0 || val === arr[idx - 1] + 1
                    ),
                    sum_size: sum > 10 ? 'big' : 'small',
                    sum_parity: sum % 2 === 0 ? 'even' : 'odd'
                };

            default:
                throw new Error(`Unsupported game type: ${gameType}`);
        }
    } catch (error) {
        logger.error('Error generating fallback result', {
            error: error.message,
            stack: error.stack,
            gameType
        });
        throw error;
    }
};

/**
 * Generate result where all users lose (UPDATED - for < 10 users rule)
 * @param {string} gameType - Game type
 * @param {number} duration - Duration in seconds
 * @param {string} periodId - Period ID
 * @returns {Promise<Object>} - Result that makes all users lose
 */
const generateAllLoseResult = async (gameType, duration, periodId) => {
    try {
        const durationKey = duration === 30 ? '30s' :
            duration === 60 ? '1m' :
                duration === 180 ? '3m' :
                    duration === 300 ? '5m' : '10m';

        // Get all bets for this period
        const betKeys = await redisClient.keys(`${gameType}:${durationKey}:${periodId}:*`);
        const placedBets = new Set();

        // Collect all bet combinations
        for (const key of betKeys) {
            try {
                const betData = await redisClient.get(key);
                if (betData) {
                    const bet = JSON.parse(betData);
                    placedBets.add(`${bet.betType}:${bet.betValue}`);
                }
            } catch (parseError) {
                continue;
            }
        }

        // Generate all possible results (now with deterministic colors)
        const allPossibleResults = await generateAllPossibleResults(gameType);

        // Find results that don't match any placed bets
        const losingResults = allPossibleResults.filter(result => {
            // Check if this result would make all bets lose
            for (const betCombo of placedBets) {
                const mockBet = { bet_type: betCombo };
                if (checkBetWin(mockBet, result, gameType)) {
                    return false; // This result would make someone win
                }
            }
            return true; // This result makes everyone lose
        });

        if (losingResults.length > 0) {
            // Select random losing result
            const selectedResult = losingResults[Math.floor(Math.random() * losingResults.length)];

            logger.info('Generated all-lose result', {
                gameType,
                periodId,
                placedBetsCount: placedBets.size,
                losingResultsCount: losingResults.length,
                selectedResult
            });

            return selectedResult;
        } else {
            // Fallback: use minimum bet result if no pure losing result found
            logger.warn('No pure losing result found, using minimum bet fallback', {
                gameType,
                periodId
            });

            return await getMinimumBetResult(gameType, duration, periodId);
        }
    } catch (error) {
        logger.error('Error generating all-lose result', {
            error: error.message,
            stack: error.stack,
            gameType,
            periodId
        });

        // Ultimate fallback: random result (with deterministic colors)
        return await generateRandomResult(gameType);
    }
};

/**
 * Validate a fallback result for a game type (UPDATED)
 * @param {Object} result - Result to validate
 * @param {string} gameType - Game type
 * @returns {Object} - Validation result
 */
const validateFallbackResult = async (result, gameType) => {
    try {
        const warnings = [];

        if (!result) {
            return { isSafe: false, warnings: ['Result is null or undefined'] };
        }

        // Validate result structure based on game type
        switch (gameType.toLowerCase()) {
            case 'wingo':
            case 'trx_wix':
                if (typeof result.number !== 'number' || result.number < 0 || result.number > 9) {
                    warnings.push('Invalid number in result');
                }
                if (!['big', 'small'].includes(result.size?.toLowerCase())) {
                    warnings.push('Invalid size in result');
                }
                
                // UPDATED: Validate color matches the deterministic rule
                const expectedColor = getColorForNumber(result.number);
                if (result.color !== expectedColor) {
                    warnings.push(`Color mismatch: number ${result.number} should have color ${expectedColor}, got ${result.color}`);
                }
                
                // Validate color is one of the valid colors
                if (!['red', 'green', 'red_violet', 'green_violet'].includes(result.color?.toLowerCase())) {
                    warnings.push('Invalid color in result');
                }
                break;

            case 'fived':
            case '5d':
                if (!Array.isArray([result.A, result.B, result.C, result.D, result.E])) {
                    warnings.push('Invalid dice results');
                }
                if (typeof result.sum !== 'number') {
                    warnings.push('Invalid sum in result');
                }
                // Validate each dice value
                ['A', 'B', 'C', 'D', 'E'].forEach(dice => {
                    if (typeof result[dice] !== 'number' || result[dice] < 1 || result[dice] > 6) {
                        warnings.push(`Invalid value for dice ${dice}`);
                    }
                });
                break;

            case 'k3':
                if (!Array.isArray([result.dice_1, result.dice_2, result.dice_3])) {
                    warnings.push('Invalid dice results');
                }
                if (typeof result.sum !== 'number') {
                    warnings.push('Invalid sum in result');
                }
                if (typeof result.has_pair !== 'boolean') {
                    warnings.push('Invalid pair status');
                }
                if (typeof result.has_triple !== 'boolean') {
                    warnings.push('Invalid triple status');
                }
                if (typeof result.is_straight !== 'boolean') {
                    warnings.push('Invalid straight status');
                }
                // Validate each dice value
                ['dice_1', 'dice_2', 'dice_3'].forEach(dice => {
                    if (typeof result[dice] !== 'number' || result[dice] < 1 || result[dice] > 6) {
                        warnings.push(`Invalid value for ${dice}`);
                    }
                });
                break;

            default:
                warnings.push(`Unsupported game type: ${gameType}`);
        }

        // Additional validation for all game types
        if (result.verificationHash && typeof result.verificationHash !== 'string') {
            warnings.push('Invalid verification hash format');
        }

        if (result.verificationLink && typeof result.verificationLink !== 'string') {
            warnings.push('Invalid verification link format');
        }

        // Check for any suspicious patterns
        if (await checkSuspiciousPatterns(result, gameType)) {
            warnings.push('Suspicious result pattern detected');
        }

        return {
            isSafe: warnings.length === 0,
            warnings
        };
    } catch (error) {
        logger.error('Error validating fallback result', {
            error: error.message,
            stack: error.stack,
            gameType
        });
        return {
            isSafe: false,
            warnings: ['Error during validation: ' + error.message]
        };
    }
};

/**
 * Approximate Wingo/TRX_WIX payout based on betting patterns (UPDATED)
 * @param {Object} result - Game result
 * @param {Object} pattern - Betting pattern analysis
 * @returns {number} - Approximated payout
 */
const approximateWingoPayout = (result, pattern) => {
    try {
        let estimatedPayout = 0;
        const totalBets = pattern.betCount;
        const avgAmount = pattern.averageAmount;

        // Estimate based on common bet distributions
        const commonDistribution = {
            NUMBER: 0.15,    // 15% of bets typically on numbers
            COLOR: 0.35,     // 35% on colors  
            SIZE: 0.30,      // 30% on size
            PARITY: 0.20     // 20% on parity
        };

        // Calculate estimated payouts for each bet type
        Object.entries(commonDistribution).forEach(([betType, percentage]) => {
            const estimatedBetsOfType = totalBets * percentage;
            const estimatedAmountOfType = estimatedBetsOfType * avgAmount;

            switch (betType) {
                case 'NUMBER':
                    // Assume even distribution across numbers (10% win rate)
                    estimatedPayout += (estimatedAmountOfType * 0.1) * 9.0;
                    break;

                case 'COLOR':
                    // UPDATED: With deterministic colors, calculate based on actual result
                    let colorWinRate = 0;
                    let colorMultiplier = 0;
                    
                    // Calculate win rates for each color based on deterministic mapping
                    const numberColorMap = {
                        'red': [2, 4, 6, 8],           // 4 numbers = 40% chance
                        'green': [1, 3, 7, 9],         // 4 numbers = 40% chance  
                        'red_violet': [0],             // 1 number = 10% chance
                        'green_violet': [5]            // 1 number = 10% chance
                    };
                    
                    if (result.color === 'red') {
                        colorWinRate = 0.4;  // 40% of numbers are red
                        colorMultiplier = 2.0;
                    } else if (result.color === 'green') {
                        colorWinRate = 0.4;  // 40% of numbers are green
                        colorMultiplier = 2.0;
                    } else if (result.color === 'red_violet') {
                        // Both red bets and violet bets win
                        colorWinRate = 0.4 + 0.1; // Red bets (1.5x) + Violet bets (4.5x)
                        colorMultiplier = (0.4 * 1.5 + 0.1 * 4.5) / 0.5; // Weighted average
                    } else if (result.color === 'green_violet') {
                        // Both green bets and violet bets win
                        colorWinRate = 0.4 + 0.1; // Green bets (1.5x) + Violet bets (4.5x)
                        colorMultiplier = (0.4 * 1.5 + 0.1 * 4.5) / 0.5; // Weighted average
                    }
                    
                    estimatedPayout += (estimatedAmountOfType * colorWinRate) * colorMultiplier;
                    break;

                case 'SIZE':
                    // 50% win rate for size (unchanged)
                    estimatedPayout += (estimatedAmountOfType * 0.5) * 2.0;
                    break;

                case 'PARITY':
                    // 50% win rate for parity (unchanged)
                    estimatedPayout += (estimatedAmountOfType * 0.5) * 2.0;
                    break;
            }
        });

        return estimatedPayout;

    } catch (error) {
        logger.error('Error approximating Wingo payout', {
            error: error.message,
            result
        });
        return 0;
    }
};

// Export statement to add at the end of the module
module.exports = {
    // ... existing exports ...
    
    // Add the new function to exports
    getColorForNumber,
    
    // These functions are updated - replace existing exports
    generateAllPossibleResults,
    generateRandomResult, 
    generateFallbackResult,
    generateAllLoseResult,
    validateFallbackResult,
    approximateWingoPayout
};
































// ===============================
// periodService.js - UPDATED FUNCTIONS
// ===============================

/**
 * Generate period ID based on game type, duration, and current time
 * NEW FORMAT: YYYYMMDD000000000 (17 digits)
 * @param {string} gameType - Game type (wingo, fiveD, k3, trx_wix)
 * @param {number} duration - Period duration in seconds
 * @param {Date} timestamp - Current date/time
 * @returns {string} - Period ID
 */
const generatePeriodId = async (gameType, duration, timestamp) => {
    try {
        console.log('\n=== GENERATING NEW FORMAT PERIOD ID ===');
        console.log(`Game Type: ${gameType}`);
        console.log(`Duration: ${duration}s`);
        console.log(`Timestamp: ${timestamp.toISOString()}`);
        
        // Ensure models are loaded
        await ensureModelsLoaded();

        // Get current date in IST
        const istMoment = moment(timestamp).tz('Asia/Kolkata');
        const dateStr = istMoment.format('YYYYMMDD');
        
        // Create duration key
        const durationKey = duration === 30 ? '30s' :
                           duration === 60 ? '1m' :
                           duration === 180 ? '3m' :
                           duration === 300 ? '5m' : '10m';
        
        // Get sequence counter from Redis
        const sequenceKey = `${gameType}:${durationKey}:daily_sequence:${dateStr}`;
        
        // Get current sequence number (atomic increment)
        let sequenceNumber = await redisClient.incr(sequenceKey);
        
        // Set expiry for sequence key (expires at 2 AM next day)
        const tomorrow2AM = moment.tz('Asia/Kolkata')
            .add(1, 'day')
            .hour(2)
            .minute(0)
            .second(0)
            .millisecond(0);
        const expirySeconds = Math.max(3600, tomorrow2AM.diff(istMoment, 'seconds'));
        await redisClient.expire(sequenceKey, expirySeconds);
        
        // Convert sequence to 0-based (Redis INCR starts from 1)
        sequenceNumber = sequenceNumber - 1;
        
        // Format: YYYYMMDD + 9-digit sequence (zero-padded)
        const periodId = `${dateStr}${sequenceNumber.toString().padStart(9, '0')}`;
        
        console.log(`Generated period ID: ${periodId}`);
        console.log(`Sequence number: ${sequenceNumber}`);
        console.log(`Sequence key: ${sequenceKey}`);
        console.log(`Expires in: ${expirySeconds} seconds`);
        console.log('=== PERIOD ID GENERATION COMPLETE ===\n');
        
        return periodId;
    } catch (error) {
        console.error('\n=== PERIOD ID GENERATION ERROR ===');
        console.error('Error details:', error.message);
        console.error('Stack trace:', error.stack);
        throw error;
    }
};

/**
 * Calculate start time for a period
 * NEW FORMAT: YYYYMMDD000000000
 * @param {string} periodId - Period ID
 * @param {number} duration - Duration in seconds
 * @returns {Date} - Start time
 */
const calculatePeriodStartTime = (periodId, duration) => {
    try {
        // Extract date from period ID (first 8 characters)
        const dateStr = periodId.substring(0, 8);
        const year = parseInt(dateStr.substring(0, 4), 10);
        const month = parseInt(dateStr.substring(4, 6), 10) - 1; // Months are 0-indexed
        const day = parseInt(dateStr.substring(6, 8), 10);
        
        // Extract sequence number (last 9 characters)
        const sequenceStr = periodId.substring(8);
        const sequenceNumber = parseInt(sequenceStr, 10);
        
        // Calculate start time based on sequence and duration
        // Start from 2 AM IST of the date + (sequence * duration)
        const baseTime = moment.tz([year, month, day, 2, 0, 0], 'Asia/Kolkata');
        const startTime = baseTime.add(sequenceNumber * duration, 'seconds');
        
        console.log('Calculated period start time:', {
            periodId,
            duration,
            dateStr,
            sequenceNumber,
            baseTime: baseTime.format(),
            startTime: startTime.format()
        });
        
        return startTime.toDate();
    } catch (error) {
        console.error('Error calculating period start time:', {
            error: error.message,
            stack: error.stack,
            periodId,
            duration
        });
        throw error;
    }
};

/**
 * Calculate period end time
 * @param {string} periodId - Period ID
 * @param {number} duration - Duration in seconds
 * @returns {Date} End time
 */
const calculatePeriodEndTime = (periodId, duration) => {
    try {
        // Get start time from period ID
        const startTime = calculatePeriodStartTime(periodId, duration);
        
        // Add duration in seconds
        const endTime = moment(startTime).tz('Asia/Kolkata').add(duration, 'seconds');
        
        logger.debug('Calculated period end time:', {
            periodId,
            duration,
            startTime: moment(startTime).tz('Asia/Kolkata').format(),
            endTime: endTime.format()
        });
        
        return endTime.toDate();
    } catch (error) {
        logger.error('Error calculating period end time:', {
            error: error.message,
            stack: error.stack,
            periodId,
            duration
        });
        throw error;
    }
};

/**
 * Generate next period ID
 * NEW FORMAT: Simply increment the sequence number
 * @param {string} currentPeriodId - Current period ID
 * @param {string} gameType - Game type
 * @param {number} duration - Duration in seconds
 * @returns {string} - Next period ID
 */
const generateNextPeriodId = async (currentPeriodId, gameType, duration) => {
    try {
        // Extract date and sequence from current period ID
        const dateStr = currentPeriodId.substring(0, 8);
        const currentSequence = parseInt(currentPeriodId.substring(8), 10);
        
        // Generate next sequence number
        const nextSequence = currentSequence + 1;
        
        // Create next period ID
        const nextPeriodId = `${dateStr}${nextSequence.toString().padStart(9, '0')}`;
        
        // Update Redis sequence counter
        const durationKey = duration === 30 ? '30s' :
                           duration === 60 ? '1m' :
                           duration === 180 ? '3m' :
                           duration === 300 ? '5m' : '10m';
        
        const sequenceKey = `${gameType}:${durationKey}:daily_sequence:${dateStr}`;
        await redisClient.set(sequenceKey, nextSequence + 1); // +1 because Redis INCR will be used next
        
        // Store this as the last period ID
        const lastPeriodKey = `${gameType}:${durationKey}:lastPeriod`;
        await redisClient.set(lastPeriodKey, nextPeriodId);
        
        // Initialize the new period
        await initializePeriod(gameType, duration, nextPeriodId);
        
        logger.info('Generated next period ID', {
            gameType,
            duration: durationKey,
            currentPeriodId,
            nextPeriodId,
            currentSequence,
            nextSequence
        });
        
        return nextPeriodId;
    } catch (error) {
        logger.error('Error generating next period ID:', {
            error: error.message,
            stack: error.stack,
            currentPeriodId,
            gameType,
            duration
        });
        throw error;
    }
};

// ===============================
// gameLogicService.js - UPDATED FUNCTIONS  
// ===============================

/**
 * Check if current period should use minimum bet result (every 20 periods)
 * NEW FORMAT: Extract sequence from last 9 digits
 * @param {string} periodId - Period ID (YYYYMMDD000000000)
 * @returns {Promise<boolean>} - Whether this is a minimum bet period
 */
const isMinimumBetPeriod = async (periodId) => {
    try {
        // Extract the sequential number from period ID (last 9 digits)
        const sequenceStr = periodId.substring(8);
        const sequentialNumber = parseInt(sequenceStr, 10);

        // Every 20th period (20, 40, 60, 80, etc.)
        const isMinimumPeriod = sequentialNumber % 20 === 0;

        logger.info('Minimum bet period check', {
            periodId,
            sequentialNumber,
            isMinimumPeriod
        });

        return isMinimumPeriod;
    } catch (error) {
        logger.error('Error checking minimum bet period', {
            error: error.message,
            periodId
        });
        return false;
    }
};

/**
 * Calculate the end time for a period
 * NEW FORMAT: Parse YYYYMMDD000000000
 * @param {string} periodId - Period ID
 * @param {number} duration - Duration in seconds
 * @returns {Date} - End time of the period
 */
const calculatePeriodEndTime = (periodId, duration) => {
    try {
        // Parse period ID to get date and sequence
        const dateStr = periodId.substring(0, 8);
        const sequenceStr = periodId.substring(8);
        
        const year = parseInt(dateStr.substring(0, 4), 10);
        const month = parseInt(dateStr.substring(4, 6), 10) - 1; // 0-indexed
        const day = parseInt(dateStr.substring(6, 8), 10);
        const sequenceNumber = parseInt(sequenceStr, 10);

        // Create start time (base time = 2 AM IST + sequence * duration)
        const baseTime = moment.tz([year, month, day, 2, 0, 0], 'Asia/Kolkata');
        const startTime = baseTime.add(sequenceNumber * duration, 'seconds');
        
        // Add duration to get end time
        const endTime = startTime.clone().add(duration, 'seconds');

        return endTime.toDate();
    } catch (error) {
        logger.error('Error calculating period end time', {
            error: error.message,
            stack: error.stack,
            periodId,
            duration
        });

        // Return current time + duration as fallback
        return new Date(Date.now() + (duration * 1000));
    }
};

// ===============================
// ADDITIONAL UTILITY FUNCTIONS
// ===============================

/**
 * Reset all sequence counters at 2 AM IST
 * This should be called by a cron job daily at 2 AM
 */
const resetDailySequences = async () => {
    try {
        const today = moment.tz('Asia/Kolkata').format('YYYYMMDD');
        
        const gameConfigs = {
            'wingo': ['30s', '1m', '3m', '5m'],
            'trx_wix': ['30s', '1m', '3m', '5m'],
            'k3': ['1m', '3m', '5m', '10m'],
            'fiveD': ['1m', '3m', '5m', '10m']
        };

        console.log(`Resetting daily sequences for ${today}`);

        for (const [gameType, durations] of Object.entries(gameConfigs)) {
            for (const duration of durations) {
                const sequenceKey = `${gameType}:${duration}:daily_sequence:${today}`;
                await redisClient.set(sequenceKey, '0');
                
                // Set expiry for next day 2 AM
                const tomorrow2AM = moment.tz('Asia/Kolkata')
                    .add(1, 'day')
                    .hour(2)
                    .minute(0)
                    .second(0);
                const expirySeconds = tomorrow2AM.diff(moment.tz('Asia/Kolkata'), 'seconds');
                await redisClient.expire(sequenceKey, Math.max(3600, expirySeconds));
                
                console.log(`Reset sequence for ${gameType}:${duration}`);
            }
        }

        console.log('Daily sequence reset completed');
    } catch (error) {
        console.error('Error resetting daily sequences:', error);
        throw error;
    }
};

/**
 * Get current sequence number for a game-duration combination
 * @param {string} gameType - Game type
 * @param {string} duration - Duration key (30s, 1m, etc.)
 * @param {string} dateStr - Date string (YYYYMMDD)
 * @returns {number} - Current sequence number
 */
const getCurrentSequence = async (gameType, duration, dateStr) => {
    try {
        const sequenceKey = `${gameType}:${duration}:daily_sequence:${dateStr}`;
        const currentSequence = await redisClient.get(sequenceKey);
        return parseInt(currentSequence || '0', 10);
    } catch (error) {
        logger.error('Error getting current sequence:', {
            error: error.message,
            gameType,
            duration,
            dateStr
        });
        return 0;
    }
};

// ===============================
// EXPORT UPDATES
// ===============================

// Add to periodService.js exports:
module.exports = {
    // ... existing exports ...
    generatePeriodId,           // UPDATED
    calculatePeriodStartTime,   // UPDATED  
    calculatePeriodEndTime,     // UPDATED
    generateNextPeriodId,       // UPDATED
    resetDailySequences,        // NEW
    getCurrentSequence,         // NEW
    // ... other existing exports ...
};

// Add to gameLogicService.js exports:
module.exports = {
    // ... existing exports ...
    isMinimumBetPeriod,         // UPDATED
    calculatePeriodEndTime,     // UPDATED
    // ... other existing exports ...
};