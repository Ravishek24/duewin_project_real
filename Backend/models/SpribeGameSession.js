// models/SpribeGameSession.js - UPDATED FOR USD AND ASSOCIATIONS
const { Model, DataTypes } = require('sequelize');

class SpribeGameSession extends Model {
    static init(sequelize) {
        return super.init({
            id: {
                type: DataTypes.INTEGER,
                primaryKey: true,
                autoIncrement: true
            },
            user_id: {
                type: DataTypes.INTEGER,
                allowNull: false,
                references: {
                    model: 'users',
                    key: 'user_id'
                }
            },
            game_id: {
                type: DataTypes.STRING,
                allowNull: false,
                comment: 'Spribe game identifier (e.g., aviator, dice)'
            },
            provider: {
                type: DataTypes.STRING,
                allowNull: false,
                comment: 'Game provider (e.g., spribe_aviator, spribe_crypto)'
            },
            launch_token: {
                type: DataTypes.STRING,
                allowNull: false,
                unique: true,
                comment: 'One-time token for game launch'
            },
            session_token: {
                type: DataTypes.STRING,
                allowNull: true,
                comment: 'Token generated by Spribe for current game session'
            },
            currency: {
                type: DataTypes.STRING,
                allowNull: false,
                defaultValue: 'USD',
                comment: 'Game currency'
            },
            platform: {
                type: DataTypes.ENUM('mobile', 'desktop'),
                allowNull: false,
                defaultValue: 'desktop'
            },
            ip_address: {
                type: DataTypes.STRING,
                allowNull: true
            },
            status: {
                type: DataTypes.ENUM('active', 'ended', 'expired'),
                allowNull: false,
                defaultValue: 'active'
            },
            started_at: {
                type: DataTypes.DATE,
                allowNull: false,
                defaultValue: DataTypes.NOW
            },
            ended_at: {
                type: DataTypes.DATE,
                allowNull: true
            },
            created_at: {
                type: DataTypes.DATE,
                defaultValue: DataTypes.NOW
            },
            updated_at: {
                type: DataTypes.DATE,
                defaultValue: DataTypes.NOW
            }
        }, {
            sequelize,
            modelName: 'SpribeGameSession',
            tableName: 'spribe_game_sessions',
            timestamps: true,
            createdAt: 'created_at',
            updatedAt: 'updated_at',
            indexes: [
                {
                    fields: ['user_id']
                },
                {
                    fields: ['launch_token']
                },
                {
                    fields: ['session_token']
                },
                {
                    fields: ['status']
                },
                {
                    fields: ['game_id']
                },
                {
                    fields: ['created_at']
                },
                {
                    // ADDED: Composite index for finding active sessions
                    name: 'idx_user_game_active',
                    fields: ['user_id', 'game_id', 'status']
                }
            ]
        });
    }

    static associate(models) {
        // User association
        if (models.User) {
            this.belongsTo(models.User, {
                foreignKey: 'user_id',
                as: 'user'
            });
        }

        // ADDED: Transactions association
        if (models.SpribeTransaction) {
            this.hasMany(models.SpribeTransaction, {
                foreignKey: 'session_id',
                as: 'transactions'
            });
        }
    }

    // ADDED: Instance methods for session management
    
    // Check if session is still valid
    isValid() {
        const now = new Date();
        const sessionAge = now - new Date(this.started_at);
        const maxAge = 4 * 60 * 60 * 1000; // 4 hours
        
        return this.status === 'active' && sessionAge < maxAge;
    }

    // ADDED: Get session duration in seconds
    getDuration() {
        const endTime = this.ended_at || new Date();
        const startTime = new Date(this.started_at);
        return Math.floor((endTime - startTime) / 1000);
    }
}

module.exports = SpribeGameSession;