'use strict';

module.exports = {
  async up(queryInterface, Sequelize) {
    try {
      console.log('🔄 Creating PlayWin6 tables...');

      // Create playwin6_game_sessions table
      await queryInterface.createTable('playwin6_game_sessions', {
        id: {
          type: Sequelize.INTEGER,
          primaryKey: true,
          autoIncrement: true
        },
        user_id: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'users',
            key: 'user_id'
          },
          onDelete: 'CASCADE'
        },
        game_id: {
          type: Sequelize.STRING,
          allowNull: false,
          comment: 'PlayWin6 game identifier'
        },
        provider: {
          type: Sequelize.STRING,
          allowNull: false,
          comment: 'Game provider (e.g., JiliGaming, PragmaticPlay)'
        },
        game_type: {
          type: Sequelize.STRING,
          allowNull: false,
          comment: 'Type of game (Slot Game, Live Casino, etc.)'
        },
        launch_token: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
          comment: 'Unique token for this game session launch'
        },
        session_token: {
          type: Sequelize.STRING,
          allowNull: true,
          comment: 'Token generated by PlayWin6 for current game session'
        },
        player_username: {
          type: Sequelize.STRING,
          allowNull: false,
          comment: 'Player username for PlayWin6'
        },
        currency: {
          type: Sequelize.STRING(10),
          allowNull: false,
          defaultValue: 'INR',
          comment: 'Game currency'
        },
        language: {
          type: Sequelize.STRING(10),
          allowNull: false,
          defaultValue: 'en',
          comment: 'Game language'
        },
        platform: {
          type: Sequelize.ENUM('mobile', 'desktop'),
          allowNull: false,
          defaultValue: 'desktop'
        },
        ip_address: {
          type: Sequelize.STRING(45),
          allowNull: true,
          comment: 'IP address where session was created'
        },
        status: {
          type: Sequelize.ENUM('active', 'ended', 'expired', 'error'),
          allowNull: false,
          defaultValue: 'active'
        },
        game_url: {
          type: Sequelize.TEXT,
          allowNull: true,
          comment: 'Full game launch URL'
        },
        provider_url: {
          type: Sequelize.TEXT,
          allowNull: true,
          comment: 'Provider game URL'
        },
        metadata: {
          type: Sequelize.JSON,
          allowNull: true,
          comment: 'Additional game metadata'
        },
        started_at: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.NOW
        },
        ended_at: {
          type: Sequelize.DATE,
          allowNull: true
        },
        created_at: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.NOW
        },
        updated_at: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.NOW
        }
      });

      // Create playwin6_transactions table
      await queryInterface.createTable('playwin6_transactions', {
        id: {
          type: Sequelize.INTEGER,
          primaryKey: true,
          autoIncrement: true
        },
        user_id: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'users',
            key: 'user_id'
          },
          onDelete: 'CASCADE'
        },
        session_id: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'playwin6_game_sessions',
            key: 'id'
          },
          onDelete: 'CASCADE'
        },
        type: {
          type: Sequelize.ENUM('bet', 'win', 'rollback', 'balance'),
          allowNull: false,
          comment: 'Type of transaction'
        },
        amount: {
          type: Sequelize.DECIMAL(15, 2),
          allowNull: false,
          comment: 'Transaction amount'
        },
        currency: {
          type: Sequelize.STRING(10),
          allowNull: false,
          defaultValue: 'INR',
          comment: 'Transaction currency'
        },
        provider: {
          type: Sequelize.STRING,
          allowNull: false,
          comment: 'Game provider (e.g., JiliGaming, PragmaticPlay)'
        },
        game_id: {
          type: Sequelize.STRING,
          allowNull: false,
          comment: 'Game identifier'
        },
        game_uid: {
          type: Sequelize.STRING,
          allowNull: true,
          comment: 'Game unique identifier from PlayWin6'
        },
        provider_tx_id: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
          comment: 'Transaction ID from PlayWin6'
        },
        operator_tx_id: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
          comment: 'Our internal transaction ID'
        },
        action: {
          type: Sequelize.STRING,
          allowNull: false,
          comment: 'Action type (bet, win, rollback, balance)'
        },
        action_id: {
          type: Sequelize.STRING,
          allowNull: true,
          comment: 'Action identifier from game'
        },
        old_balance: {
          type: Sequelize.DECIMAL(15, 2),
          allowNull: false,
          comment: 'Balance before transaction'
        },
        new_balance: {
          type: Sequelize.DECIMAL(15, 2),
          allowNull: false,
          comment: 'Balance after transaction'
        },
        wallet_amount: {
          type: Sequelize.DECIMAL(15, 2),
          allowNull: true,
          comment: 'Wallet amount from callback'
        },
        status: {
          type: Sequelize.ENUM('pending', 'completed', 'failed', 'rolled_back'),
          allowNull: false,
          defaultValue: 'pending'
        },
        rollback_provider_tx_id: {
          type: Sequelize.STRING,
          allowNull: true,
          comment: 'Reference to original transaction for rollbacks'
        },
        platform: {
          type: Sequelize.ENUM('mobile', 'desktop'),
          allowNull: true,
          comment: 'Platform where transaction occurred'
        },
        ip_address: {
          type: Sequelize.STRING(45),
          allowNull: true,
          comment: 'IP address where transaction occurred'
        },
        callback_data: {
          type: Sequelize.JSON,
          allowNull: true,
          comment: 'Raw callback data from PlayWin6'
        },
        encrypted_payload: {
          type: Sequelize.TEXT,
          allowNull: true,
          comment: 'Encrypted payload from PlayWin6'
        },
        timestamp: {
          type: Sequelize.BIGINT,
          allowNull: true,
          comment: 'Timestamp from PlayWin6 callback'
        },
        token: {
          type: Sequelize.STRING,
          allowNull: true,
          comment: 'Token from PlayWin6 callback'
        },
        created_at: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.NOW
        },
        updated_at: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.NOW
        }
      });

      // Create indexes for playwin6_game_sessions
      await queryInterface.addIndex('playwin6_game_sessions', ['user_id']);
      await queryInterface.addIndex('playwin6_game_sessions', ['session_token']);
      await queryInterface.addIndex('playwin6_game_sessions', ['status']);
      await queryInterface.addIndex('playwin6_game_sessions', ['game_id']);
      await queryInterface.addIndex('playwin6_game_sessions', ['provider']);
      await queryInterface.addIndex('playwin6_game_sessions', ['created_at']);
      await queryInterface.addIndex('playwin6_game_sessions', ['user_id', 'game_id', 'status'], {
        name: 'idx_user_game_active'
      });
      await queryInterface.addIndex('playwin6_game_sessions', ['provider', 'status'], {
        name: 'idx_provider_status'
      });

      // Create indexes for playwin6_transactions
      await queryInterface.addIndex('playwin6_transactions', ['user_id']);
      await queryInterface.addIndex('playwin6_transactions', ['session_id']);
      await queryInterface.addIndex('playwin6_transactions', ['type']);
      await queryInterface.addIndex('playwin6_transactions', ['status']);
      await queryInterface.addIndex('playwin6_transactions', ['game_uid']);
      await queryInterface.addIndex('playwin6_transactions', ['created_at']);
      await queryInterface.addIndex('playwin6_transactions', ['rollback_provider_tx_id'], {
        name: 'idx_rollback_provider_tx'
      });
      await queryInterface.addIndex('playwin6_transactions', ['session_id', 'type', 'status'], {
        name: 'idx_session_type_status'
      });
      await queryInterface.addIndex('playwin6_transactions', ['game_uid', 'provider'], {
        name: 'idx_game_uid_provider'
      });

      // Additional performance indexes
      await queryInterface.addIndex('playwin6_transactions', ['user_id', 'created_at'], {
        name: 'idx_playwin6_user_created'
      });
      await queryInterface.addIndex('playwin6_transactions', ['provider', 'type'], {
        name: 'idx_playwin6_provider_type'
      });
      await queryInterface.addIndex('playwin6_transactions', ['status', 'created_at'], {
        name: 'idx_playwin6_status_created'
      });
      await queryInterface.addIndex('playwin6_game_sessions', ['session_token', 'created_at'], {
        name: 'idx_playwin6_session_created'
      });
      await queryInterface.addIndex('playwin6_transactions', ['timestamp', 'status'], {
        name: 'idx_playwin6_callback_timestamp'
      });

      console.log('✅ PlayWin6 tables created successfully');
    } catch (error) {
      console.error('❌ Error creating PlayWin6 tables:', error);
      throw error;
    }
  },

  async down(queryInterface, Sequelize) {
    try {
      console.log('🔄 Dropping PlayWin6 tables...');

      // Drop tables in reverse order (due to foreign key constraints)
      await queryInterface.dropTable('playwin6_transactions');
      await queryInterface.dropTable('playwin6_game_sessions');

      console.log('✅ PlayWin6 tables dropped successfully');
    } catch (error) {
      console.error('❌ Error dropping PlayWin6 tables:', error);
      throw error;
    }
  }
}; 